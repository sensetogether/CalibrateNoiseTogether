/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.example.colibris.nsd;

import android.app.Activity;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.net.NetworkInfo;
import android.net.wifi.p2p.WifiP2pDevice;
import android.net.wifi.p2p.WifiP2pGroup;
import android.net.wifi.p2p.WifiP2pManager;
import android.net.wifi.p2p.WifiP2pManager.Channel;
import android.net.wifi.p2p.WifiP2pManager.ConnectionInfoListener;
import android.util.Log;

import com.example.colibris.ui.WiFiServiceDiscoveryActivity;

/**
 * The WiFiDirectBroadcastReceiver class   notifies  important events related to wifi-direct p2p events.
 */
public class WiFiDirectBroadcastReceiver extends BroadcastReceiver {
    /**
     * Wifi direct manager
     */
    private WifiP2pManager manager;
    /**
     * wifi direct channel
     */
    private Channel channel;
    /**
     * activity
     */
    private Activity activity;

    /**
     * @param manager WifiP2pManager system service
     * @param channel Wifi p2p channel
     * @param activity activity associated with the receiver
     */
    public WiFiDirectBroadcastReceiver(WifiP2pManager manager, Channel channel,
                                       Activity activity) {
        super();
        this.manager = manager;
        this.channel = channel;
        this.activity = activity;
    }

    /**
     * Log some informations that related to the events that are generated by Wifi direct
     * @param context over whch operate the methods
     * @param intent
     */

     @Override
    public void onReceive(Context context, Intent intent) {
        String action = intent.getAction();
        Log.d(WiFiServiceDiscoveryActivity.TAG, action);


        if (WifiP2pManager.WIFI_P2P_THIS_DEVICE_CHANGED_ACTION.equals(action)) {
            Log.e(WiFiServiceDiscoveryActivity.TAG, "this device changed its details");
        }

        if (WifiP2pManager.WIFI_P2P_PEERS_CHANGED_ACTION.equals(action)) {
            Log.e(WiFiServiceDiscoveryActivity.TAG, "P2P list of devices  changed action");

            //EXTRA_P2P_DEVICE_LIST //String
            // ??? EXTRA_WIFI_P2P_DEVICE
        }
        //EXTRA_WIFI_P2P_GROUP The lookup key for a WifiP2pGroup object associated with the p2p network.

        if (WifiP2pManager.WIFI_P2P_STATE_CHANGED_ACTION.equals(action)) {
            Log.e(WiFiServiceDiscoveryActivity.TAG, "P2P device changed action");

            int state = intent.getIntExtra(WifiP2pManager.EXTRA_WIFI_STATE, WifiP2pManager.WIFI_P2P_STATE_DISABLED);
            if (state == WifiP2pManager.WIFI_P2P_STATE_DISABLED)
            {
                // Wifi P2P discovery started.
                Log.e(WiFiServiceDiscoveryActivity.TAG,
                        "Wifi P2P state disabled   ");
            }
            else
            {
                Log.e(WiFiServiceDiscoveryActivity.TAG,
                        "Wifi P2P discovery is enabled");
            }
        }

        if (WifiP2pManager.WIFI_P2P_THIS_DEVICE_CHANGED_ACTION.equals(action)) {
            Log.e(WiFiServiceDiscoveryActivity.TAG, "P2P device changed action");
        }


        if (WifiP2pManager.WIFI_P2P_CONNECTION_CHANGED_ACTION.equals(action)) {
            Log.e(WiFiServiceDiscoveryActivity.TAG, "connection changed action");
            if (manager == null) {
                return;
            }


            WifiP2pGroup group = intent.getParcelableExtra(WifiP2pManager.EXTRA_WIFI_P2P_GROUP);
            Log.e(WiFiServiceDiscoveryActivity.TAG, group.getClientList().toString());
            Log.e("broadcast",  group.getClientList().toString());





            NetworkInfo networkInfo = intent.getParcelableExtra(WifiP2pManager.EXTRA_NETWORK_INFO);
            if (networkInfo.isConnected()) {
                // we are connected with the other device, request connection
                // info to find group owner IP
                Log.e(WiFiServiceDiscoveryActivity.TAG, "Connected to p2p network. Requesting network details");

                //suppress from the group if it did not already workout
                //check if the group is not already connected
                manager.requestConnectionInfo(channel, (ConnectionInfoListener) activity);
            } else {
                Log.e(WiFiServiceDiscoveryActivity.TAG,
                        "not Connected ");
                // It's a disconnect


            }


        } else if (WifiP2pManager.WIFI_P2P_THIS_DEVICE_CHANGED_ACTION.equals(action)) {
            WifiP2pDevice device = intent
                    .getParcelableExtra(WifiP2pManager.EXTRA_WIFI_P2P_DEVICE);
            Log.e(WiFiServiceDiscoveryActivity.TAG, "Device status -" + device.status);
        }


        if (WifiP2pManager.WIFI_P2P_DISCOVERY_CHANGED_ACTION.equals(intent.getAction()))
        {
            Log.e(WiFiServiceDiscoveryActivity.TAG, "Discovery changed state");
        }
        int state = intent.getIntExtra(WifiP2pManager.EXTRA_DISCOVERY_STATE, 10000);
        if (state == WifiP2pManager.WIFI_P2P_DISCOVERY_STARTED)
        {
            // Wifi P2P discovery started.
            Log.e(WiFiServiceDiscoveryActivity.TAG,
                    "Wifi P2P discovery started  ");
        }

        else
        {
            // Wifi P2P discovery stopped.
            // Do what you want to do when discovery stopped
            Log.e(WiFiServiceDiscoveryActivity.TAG,
                    "Wifi P2P discovery  in another state");
        }

        if (state == WifiP2pManager.WIFI_P2P_DISCOVERY_STOPPED)
        {
            // Wifi P2P discovery started.
            Log.e(WiFiServiceDiscoveryActivity.TAG,
                    "Wifi P2P discovery STOPPED  ");
        }


    }








}
//}